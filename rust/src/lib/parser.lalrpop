use std::str::FromStr;
use crate::ast::{Exp, Val, BinOp};

grammar;

pub Val: Val = {
    "#" <v1:ValBox> "(" <v2:ValBox> ")" => Val::Variant(v1, v2),
    Num => Val::Num(<>),
};

pub ValBox: Box<Val> = {
    Val => Box::new(<>),
};

pub Exp: Box<Exp> = { // (1)
    <v:Val> "{" <e:Exp> "}" => Box::new(Exp::Nest(v, e)),
    Exp ExpOp Factor => Box::new(Exp::BinOp(<>)), // (2)
    Factor,
};

ExpOp: BinOp = { // (3)
    "+" => BinOp::Add,
    "-" => BinOp::Sub,
};

Factor: Box<Exp> = {
    Factor FactorOp Term => Box::new(Exp::BinOp(<>)),
    Term,
};

FactorOp: BinOp = {
    "*" => BinOp::Mul,
    "/" => BinOp::Div,
};

Term: Box<Exp> = {
    Num => Box::new(Exp::Number(<>)),
    "(" <Exp> ")"
};

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};
