metavar x , y , z ::=
{{ coq nat}} {{ coq-equality }}

grammar

terminals :: 'terminals_' ::=
| \ :: :: lambda {{ tex \lambda }}
| -> :: :: rightarrow {{ tex \rightarrow }}
| => :: :: thickrightarrow {{ tex \Rightarrow }}
| := :: :: defineOrAssign {{ tex \mathrel{\texttt:\texttt=} }}
| * :: :: cdot {{ tex {\cdot} }}
| ^* :: :: stepStar {{ tex \texttt{\^{}*} }}
| +* :: :: plusStar {{ tex \texttt{+*} }}
| & :: :: amp {{ tex \texttt{\&} }}
| $ :: :: dollar {{ tex \texttt{\$} }}
| @ :: :: at {{ tex \texttt{@} }}
| >> :: :: mapOp {{ tex \texttt{>>} }}
| % :: :: projectOp {{ tex \texttt{\%} }}
| #symtree :: :: st {{ tex \texttt{symtree} }}
| #map :: :: map {{ tex \texttt{map} }}
| #set :: :: set {{ tex \texttt{set} }}
| #ord :: :: ord {{ tex \texttt{ord} }}
| #    :: :: hash {{ tex \texttt{\#} }}
| #empty :: :: empty {{ tex \cdot }}
| ~ :: :: tilde {{ tex \texttt{$\sim$} }}
| |- :: :: vdash {{ tex \vdash }}
| ;; :: :: dsemi {{ tex ; }}
| ~> :: :: leadsto {{ tex \leadsto }}
| --> :: :: lra {{ tex \longrightarrow }}

G {{ tex \Gamma }} :: 'G_' ::= {{ com Contexts. }}
 | #empty       :: :: empty {{ tex \cdot }}
 | G , x : kind :: :: hasKind
 | G , x : sort :: :: hasSort
 | G , x : A    :: :: hasType
 | G , past X   :: :: past {{ com past [[X]] }}
 | G , within X   :: :: within {{ com within [[X]] }}

A :: 'A_' ::= {{ com Value types. }}
 | $ X :: :: symbol {{ com Symbol. }}
 | & X A :: :: address {{ com Address. }}
 | { C } :: :: suspComp {{ com Suspended computation (thunk). }}
 | { variantCases } :: :: variantType {{ com Sum type. }}
 | { recordFields } :: :: productType {{ com Product type. }}

variantCases :: 'variantCases_' ::=
 | :: :: empty
 | # X : A :: :: variant

recordFields :: 'recordFields_' ::=
 | :: :: empty
 | X : A :: :: variant

C :: 'C_' ::= {{ com Computation types. }}
 | X { C } :: :: nestedComp
 | E ; C :: :: effectComp
 | A -> C :: :: argumentValue
 | A :: :: returnValue
 | { namedComps } :: :: namedComps

namedComps :: 'namedComps_' ::=
 | :: :: empty
 | X => C , namedComps :: :: namedComps

E :: 'E_' ::= {{ com Computation effects. }}
 | X { E } :: :: nest
 | E1 ; E2 :: :: sequence
 | X := A :: :: put
 | @ X = A :: :: get
 | return A :: :: return

S :: 'st_ ::= {{ com Symbol tree. }}
 | :: :: empty
 | s S :: :: oneMore
 | ( S1 ) S2 :: :: balParen
 | [ S1 ] S2 :: :: balBrack
 | { S1 } S2 :: :: balBrace

sort {{ tex \gamma }} :: 'sort_' ::= {{ com Name sorts. }}
 | #symtree :: :: st
 | #set ( sort ) :: :: set
 | #ord ( sort ) :: :: ord
 | #map ( sort1 , sort2 ) :: :: map
 | sort1 -> sort2 :: :: arrow
 | ( sort ) :: :: paren

X, Y, Z :: 'term_' ::= {{ com Symbolic-tree terms. }}
 | as sort have X :: :: annotate
 | $ S :: :: symbolTree
 | $( S ) :: :: symbolsDelim
 | !$ X :: :: flatten
 | ~ X :: :: memOf
 | X * Y :: :: binaryForm
 | X * [ Y ] Z :: :: ternaryForm
 | X , Y :: :: gather {{ tex [[X]]{ \texttt,}[[Y]] }}
 | \ x => X :: :: defineFn (+ bind x in X +)
 | \ x := X :: :: defineRec (+ bind x in X +)
 | X ^* Y :: :: stepStar
 | X +* Y :: :: plusStar
 | X >> Y :: :: map
 | X Y :: :: applyFn
 | X => Y :: :: associate
 | X % Y :: :: project
 | ( X ) :: :: paren
 | x :: :: var

v :: 'v_' ::= {{ com Values. }}
 | x :: :: var
 | # v :: :: injectUnit {{ com inject unit value into variant type. }}
 | # v1 ( v2 ) :: :: inject {{ com inject into variant type. }}
 | v1 , v2 => v3 :: :: extend {{ com extend a record type. }}
 | X :: :: symbolTerm {{ com Symbol term. }}

e :: 'e_' ::= {{ com Minimal expressions. }}
 | X { e } :: :: nest
 | let x = e1 ; e2 :: :: letBind
 | let fields = v ; e :: :: letBindRecord
 | switch v { cases } :: :: switchVariant
 | return v :: :: return
 | \ x := e :: :: defineRec
 | \ x => e :: :: defineFn
 | e v :: :: applyFn
 | assert v1 = v2 :: :: assertEq
 | v1 := v2 :: :: put
 | @ v1 :: :: get
 | { namedBranches } :: :: namedBranches
 | e => v :: :: selectBranch
 | desugar [[ eS ]] :: :: sugar {{ com implicitly placed by full-syntax parser. }}

eS :: 'eS_' ::= {{ com Sugar expression forms. }}
 | let fields = e1 ; e2 :: :: letBind
 | \ fields => e :: :: defineFn
 | \ switch { cases } :: :: casesFn

namedBranches :: 'namedBranches_' ::=
 | :: :: empty
 | v => e , namedBranches :: :: branch

pat :: 'pat_' ::= {{ com Pattern-match expression. }}
 | _ :: :: ignoreMatch
 | x :: :: bindMatch
 | { fields } :: :: fieldsMatch {{ com Record elim form. }}

fields :: 'fields_' ::= {{ com Product-type fields. }}
 | v => pat , fields :: :: field
 | x :: :: bindRest

cases :: 'cases_' ::= {{ com Variant-type cases. }}
 | # v ( pat ) => e ; cases :: :: case
 | otherwise e :: :: otherwise

t :: 'trace_' ::= {{ com Trace. }}
 | return v :: :: value
 | t1 ; t2 :: :: seq
 | X := v :: :: put
 | @ X = v :: :: get
 | X { t } :: :: nest


s :: 'sym_' ::= {{ com Atomic symbols. }}
 | ! :: :: bang
 | " :: :: dtick
 | # :: :: hashsign
 | $ :: :: dollar
 | & :: :: amp
 | ' :: :: tick
 | '|' :: :: pipe
 | * :: :: star
 | + :: :: plus
 | , :: :: comma
 | - :: :: dash
 | . :: :: dot
 | / :: :: fslash
 | 0 :: :: zero
 | 1 :: :: one
 | 2 :: :: two
 | 3 :: :: three
 | 4 :: :: four
 | 5 :: :: five
 | 6 :: :: six
 | 7 :: :: seven
 | 8 :: :: eight
 | 9 :: :: nine
 | : :: :: colon
 | ; :: :: semi
 | < :: :: less
 | = :: :: equalsign
 | > :: :: grtr
 | ? :: :: quest
 | @ :: :: atsign
 | \ :: :: bslash
 | ^ :: :: caret
 | _ :: :: under
 | ` :: :: btick
 | ~ :: :: tilde
 | a :: :: a
 | z :: :: z
 | 'A' :: :: A
 | 'Z' :: :: Z


kind {{ tex K }} :: kind_ ::= {{ com Kinds. }}
 | #type :: :: type
 | #sort :: :: sort
 | kind1 -> kind2 :: :: arrow

substitutions
single X x :: tsubst

defns J :: '' ::=

defn
G |- sort1 = sort2 : kind ::  :: sortEqual :: 'sort_' by


defn #sortIsFlat sort :: :: sortIsFlat :: 'flat_'
{{ tex \texttt{sortIsFlat}~[[sort]] }}
by


------------------ :: symTree
#sortIsFlat #symtree

#sortIsFlat sort
----------------------- :: set
#sortIsFlat #set(sort)

#sortIsFlat sort1
#sortIsFlat sort2
------------------------------ :: map
#sortIsFlat #map(sort1, sort2)



defn
G |- X : sort ::  :: hasSort :: 'sort_'
{{ com Symbol-tree term has sort. }}
by

----------------- :: symbols
G |- $ S : #symtree

G |- X : sort
#sortIsFlat sort
----------------- :: flatten
G |- !$ X : #symtree

G |- X : sort2
G |- sort1 = sort2 : kind
---------------------------- :: annot
G |- as sort1 have X : sort1


G |- X : #symtree
G |- Y : sort
#sortIsFlat sort
-------------------------------- :: stL
G |- X * Y : sort

G |- X : sort
G |- Y : #symtree
#sortIsFlat sort
-------------------------------- :: stR
G |- X * Y : sort

G |- X : #symtree
G |- Y : #symtree
G |- Z : sort
#sortIsFlat sort
------------------------ :: ternL
G |- X *[ Y ] Z : sort

G |- X : sort
G |- Y : #symtree
G |- Z : #symtree
#sortIsFlat sort
------------------------ :: ternR
G |- X *[ Y ] Z : sort



G |- X : #set(sort)
G |- Y : #set(sort)
------------------------ :: gSet
G |- X , Y : #set(sort)

G |- X : #ord(sort)
G |- Y : #ord(sort)
------------------------ :: gOrd
G |- X , Y : #ord(sort)

G |- X : #map(sort1, sort2)
G |- Y : #map(sort1, sort2)
--------------------------------- :: gMap
G |- X , Y : #map(sort1, sort2)

G, x : sort1 |- X : sort2
-------------------------- :: fn
G |- \x => X : sort1 -> sort2

G, x : sort |- X : sort
-------------------------- :: rec
G |- \x := X : sort

G |- X : sort1 -> sort2
G |- Y : sort1
------------------- :: app
G |- X Y : sort2


G |- X : sort1
G |- Y : sort2
--------------------------------- :: associate
G |- X => Y : #map(sort1, sort2)

G |- X : #map(sort1, sort2)
G |- Y : sort1
--------------------------------- :: projMem
G |- X % Y : sort2

G |- X : #map(sort1, sort2)
G |- Y : #set(sort1)
--------------------------------- :: projSet
G |- X % Y : #set(sort2)


G |- X : #set(sort)
-------------------- :: memOf
G |- ~ X : sort

G |- X : #set(sort)
G |- Y : sort -> #set(sort)
---------------------------- :: stepStar
G |- X ^* Y : #set(sort)

G |- X : #set(sort)
G |- Y : sort -> #set(sort)
---------------------------- :: plusStar
G |- X +* Y : #set(sort)


G |- X : #symtree
G |- Y : #symtree -> #symtree
---------------------------- :: mapSt
G |- X >> Y : #symtree

G |- X : #set(sort)
G |- Y : sort -> #set(sort)
---------------------------- :: mapSet
G |- X >> Y : #set(sort)

G |- X : #ord(sort)
G |- Y : sort -> #ord(sort)
---------------------------- :: mapOrd
G |- X >> Y : #ord(sort)

G |- X : #map(sort1, sort2)
G |- Y : sort1 -> (sort2 -> #map(sort1', sort2'))
------------------------------------------------- :: mapMap
G |- X >> Y : #map(sort1', sort2')



defn
G ~> X ; Y ::  :: contextHasSmbolTreeFns :: 'stfs_'
{{ com Context has symbol-tree functions for current and just-past nest names. }}
by


---------------------------- :: emp
#empty ~> \x => x ; \y => y

G ~> X ; Y
--------------------- :: varKind
G, x : kind ~> X ; Y

G ~> X ; Y
----------------------- :: varSort
G, x : sort ~> X ; Y

G ~> X ; Y
----------------- :: varType
G, x : A ~> X ; Y

G ~> X ; Y
-------------------------------- :: past
G, past Y ~> X ; \y => (Y * y)

G ~> X1 ; Y
---------------------------------------------- :: within
G, within X2 ~> \x => (X1 (X2 * x)) ; \y => y

defn
G1 |- E ~> G2 ::  :: effContext :: effContext_
{{ com Witness effects of past (top-level) nests as context frames. }}
by

---------------------------- :: past
G |- X { E } ~> G, past X

G1 |- E1 ~> G2
G2 |- E2 ~> G3
------------------ :: seq
G1 |- E1 ; E2 ~> G3

------------------ :: get
G |- @ X = A ~> G

------------------ :: put
G |- X := A ~> G

------------------ :: return
G |- return A ~> G


defn
G |- v : A ::  :: valHasType :: 'vty_' by


defn
G |- e : C ::  :: compHasType :: 'cty_' by

G |- v : A
------------------ :: ret
G |- return v : A

G1 |- e1 : E ; A
G1 |- E ~> G2
G2, x : A |- e2 : C
--------------------------- :: let
G1 |- let x = e1 ; e2 : C

G, x : A |- e : C
----------------------- :: lam
G |- \x => e : A -> C

G, x : {C} |- e : C
--------------------- :: fix
G |- \x := e : C

G |- v : A
G |- e : E ; A -> C
------------------------- :: app
G |- e v : E ; C

G, within X |- e : C
------------------------ :: nest
G |- X { e } : X { C }

G |- v1 : $ Z
G ~> X ; Y
G |- v2 : A
---------------------------------------- :: put
G |- v1 := v2 : X(Y(Z)) := A ; & X(Y(Z)) A

G |- v : & X A
----------------------- :: get
G |- @ v : @ X = A ; A

% let fields = v ; e :: :: letBindRecord
% switch v { cases } :: :: switchVariant
% assert v1 = v2 :: :: assertEq
% { namedBranches } :: :: namedBranches
%  e => v :: :: selectBranch

defn
G |- t : E  :: :: traceHasEff :: 'tr_' by

G |- v : A
--------------------------- :: return
G |- return v : return A

G |- t1 : E1
G |- t2 : E2
----------------------- :: seq
G |- t1 ; t2 : E1 ; E2

G |- v : A
G |- X : #symtree
------------------------ :: put
G |- X := v : X := A

G |- v : A
G |- X : #symtree
------------------------ :: get
G |- @ X = v : @ X = A

G |- t : E
G |- X : #symtree
------------------------ :: nest
G |- X { t } : X { E }

defn
t1 ;; e1 --> t2  ;; e2 :: :: compStep :: 'tr_' by
